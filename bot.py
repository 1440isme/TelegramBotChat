import os
import asyncio
import google.generativeai as genai
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)

# L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (b·∫£o m·∫≠t h∆°n)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GENAI_API_KEY = os.getenv("GENAI_API_KEY")

# Ki·ªÉm tra API key tr∆∞·ªõc khi ch·∫°y
if not TELEGRAM_TOKEN or not GENAI_API_KEY:
    raise ValueError("‚ùå Thi·∫øu API Token! H√£y ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_TOKEN v√† GENAI_API_KEY.")

# C·∫•u h√¨nh Gemini AI
genai.configure(api_key=GENAI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

# Th√¥ng tin bot
BOT_NAME = "1440 Support"
BOT_CREATOR = "Tr∆∞∆°ng C√¥ng B√¨nh"

# X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text.lower().strip()

    # Ki·ªÉm tra c√¢u h·ªèi v·ªÅ bot
    if user_message in ["b·∫°n l√† ai", "m√†y l√† ai", "bot l√† ai"]:
        bot_reply = f"ü§ñ T√¥i l√† {BOT_NAME}, ƒë∆∞·ª£c {BOT_CREATOR} t·∫°o ra ƒë·ªÉ h·ªó tr·ª£ b·∫°n."
    else:
        # G·ªçi Google Gemini API
        response = model.generate_content(user_message)
        bot_reply = response.text if response else "‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù."

    # G·ª≠i ph·∫£n h·ªìi
    await update.message.reply_text(bot_reply)

# L·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = f"üéâ Xin ch√†o! T√¥i l√† {BOT_NAME}, ƒë∆∞·ª£c t·∫°o b·ªüi {BOT_CREATOR}. H√£y nh·∫≠p /help ƒë·ªÉ xem danh s√°ch l·ªánh!"
    await update.message.reply_text(message)

# L·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "üìå Danh s√°ch l·ªánh:\n"
        "/start - Gi·ªõi thi·ªáu bot\n"
        "/help - Xem danh s√°ch l·ªánh\n"
        "/about - Th√¥ng tin v·ªÅ bot\n"
        "B·∫°n c√≥ th·ªÉ g·ª≠i b·∫•t k·ª≥ tin nh·∫Øn n√†o, t√¥i s·∫Ω c·ªë g·∫Øng gi√∫p b·∫°n! üòä"
    )
    await update.message.reply_text(message)

# L·ªánh /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = f"‚ÑπÔ∏è T√¥i l√† {BOT_NAME}, m·ªôt chatbot th√¥ng minh do {BOT_CREATOR} ph√°t tri·ªÉn. T√¥i c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi, h·ªó tr·ª£ t√¨m ki·∫øm v√† nhi·ªÅu th·ª© kh√°c!"
    await update.message.reply_text(message)

# H√†m kh·ªüi ƒë·ªông bot
async def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Th√™m l·ªánh
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    print("ü§ñ Bot ƒëang ch·∫°y...")
    await app.run_polling()

# Ch·∫°y bot an to√†n v·ªõi asyncio tr√™n Python 3.12
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "This event loop is already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
        else:
            raise
