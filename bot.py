import os
import logging
import google.generativeai as genai
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import asyncio
import nest_asyncio
nest_asyncio.apply()


# L·∫•y Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GENAI_API_KEY = os.getenv("GENAI_API_KEY")

# C·∫•u h√¨nh Google Gemini AI
genai.configure(api_key=GENAI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

BOT_NAME = "1440 Support"
BOT_CREATOR = "Tr∆∞∆°ng C√¥ng B√¨nh"

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)

# Kh·ªüi t·∫°o bot Telegram
bot_app = Application.builder().token(TELEGRAM_TOKEN).build()

# H√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
async def chat(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text.lower().strip()

    if user_message in ["b·∫°n l√† ai", "m√†y l√† ai", "bot l√† ai"]:
        bot_reply = f"ü§ñ T√¥i l√† {BOT_NAME}, ƒë∆∞·ª£c {BOT_CREATOR} t·∫°o ra ƒë·ªÉ h·ªó tr·ª£ b·∫°n."
    else:
        response = model.generate_content(user_message)
        bot_reply = response.text if response else "‚ùå L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu."

    await update.message.reply_text(bot_reply)

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(f"üéâ Xin ch√†o! T√¥i l√† {BOT_NAME}, do {BOT_CREATOR} ph√°t tri·ªÉn.")

async def help_command(update: Update, context: CallbackContext) -> None:
    message = (
        "üìå Danh s√°ch l·ªánh:\n"
        "/start - Gi·ªõi thi·ªáu bot\n"
        "/help - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n"
        "/about - Th√¥ng tin v·ªÅ bot"
    )
    await update.message.reply_text(message)

async def about(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(f"‚ÑπÔ∏è T√¥i l√† {BOT_NAME}, chatbot c·ªßa {BOT_CREATOR}.")

# Th√™m handler cho bot
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("help", help_command))
bot_app.add_handler(CommandHandler("about", about))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

@app.route("/")
def home():
    return "Bot is running!"

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
async def webhook():
    update = Update.de_json(request.get_json(), bot_app.bot)
    await bot_app.process_update(update)
    return "OK", 200

def run_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    bot_app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=f"https://your-render-url/{TELEGRAM_TOKEN}"
    )

if __name__ == "__main__":
    from threading import Thread
    Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
